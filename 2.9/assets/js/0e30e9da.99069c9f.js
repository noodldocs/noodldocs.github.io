"use strict";(self.webpackChunknoodl_docs=self.webpackChunknoodl_docs||[]).push([[4816],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>f});var a=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=a.createContext({}),d=function(e){var t=a.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(o),c=n,f=u["".concat(s,".").concat(c)]||u[c]||h[c]||i;return o?a.createElement(f,r(r({ref:t},p),{},{components:o})):a.createElement(f,r({ref:t},p))}));function f(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,r=new Array(i);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,r[1]=l;for(var d=2;d<i;d++)r[d]=o[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,o)}c.displayName="MDXCreateElement"},59637:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=o(87462),n=(o(67294),o(3905));const i={title:"Prefab Contributions",hide_title:!0},r="Prefab contributions",l={unversionedId:"prefab-contributions",id:"prefab-contributions",title:"Prefab Contributions",description:"All Prefabs in Noodl are just standard Noodl Components, and all of them are served to the Nood Editor Node Picker through the docs. This means that if you have built a Noodl app with components you think would benefit others as well - sharing your own Prefab with the rest of the Noodl community is just one GitHub Pull request away!",source:"@site/library/prefab-contributions.mdx",sourceDirName:".",slug:"/prefab-contributions",permalink:"/2.9/library/prefab-contributions",draft:!1,tags:[],version:"current",frontMatter:{title:"Prefab Contributions",hide_title:!0},sidebar:"librarySidebar",previous:{title:"Weavy Integration",permalink:"/2.9/library/examples/weavy-integration"}},s={},d=[{value:"Quick overview of the process",id:"quick-overview-of-the-process",level:2},{value:"Prefab guidelines",id:"prefab-guidelines",level:2},{value:"Exporting the Prefab",id:"exporting-the-prefab",level:2},{value:"Cloning the docs repo",id:"cloning-the-docs-repo",level:2},{value:"Making changes",id:"making-changes",level:2},{value:"Writing the docs",id:"writing-the-docs",level:2},{value:"Boilerplate structure",id:"boilerplate-structure",level:3},{value:"Linking it up",id:"linking-it-up",level:3},{value:"Prefab doc structure",id:"prefab-doc-structure",level:3},{value:"Creating a sidebar",id:"creating-a-sidebar",level:3},{value:"Pull request time!",id:"pull-request-time",level:2}],p={toc:d},u="wrapper";function h(e){let{components:t,...i}=e;return(0,n.kt)(u,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"prefab-contributions"},"Prefab contributions"),(0,n.kt)("p",null,"All Prefabs in Noodl are just standard Noodl Components, and all of them are served to the Nood Editor Node Picker through the docs. This means that if you have built a Noodl app with components you think would benefit others as well - sharing your own Prefab with the rest of the Noodl community is just one GitHub Pull request away!"),(0,n.kt)("h2",{id:"quick-overview-of-the-process"},"Quick overview of the process"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Build the Prefab following the guidelines below, and export the components."),(0,n.kt)("li",{parentName:"ul"},"Download the ",(0,n.kt)("a",{target:"_blank",href:o(67806).Z},"Prefab Docs Boilerplate zip"),"."),(0,n.kt)("li",{parentName:"ul"},"Clone the Noodl docs repo and create a new branch."),(0,n.kt)("li",{parentName:"ul"},"Drop all boilerplate files in the correct folders in Noodl docs, dont forget to add the Prefab zip export to the static assets folder."),(0,n.kt)("li",{parentName:"ul"},"Add your Prefab to the index."),(0,n.kt)("li",{parentName:"ul"},"Write your docs and setup the sidebar."),(0,n.kt)("li",{parentName:"ul"},"Do a test build."),(0,n.kt)("li",{parentName:"ul"},"Submit pull request")),(0,n.kt)("h2",{id:"prefab-guidelines"},"Prefab guidelines"),(0,n.kt)("p",null,"For your Prefab to be as successful as possible we have a couple of guidelines that are good to follow. Please consider the following before exporting it:"),(0,n.kt)("p",null,"The Prefab should work across many different projects, built by many different users. Try making it as general and isolated as possible, so that it can be used in a variety of scenarios. Some examples would include:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Build in isolation"),": Use a fresh Noodl project to build the Prefab. This will make it easier to keep track of, version control and export cleanly with no unnecessary dependencies."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"General naming"),": Consider the component ",(0,n.kt)("inlineCode",{parentName:"li"},"Save Username To localStorage")," with a ",(0,n.kt)("inlineCode",{parentName:"li"},"Username")," input vs. ",(0,n.kt)("inlineCode",{parentName:"li"},"Save to localStorage")," with the inputs ",(0,n.kt)("inlineCode",{parentName:"li"},"Key")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"Value"),". This will allow the user to not only save the username, but any value they need by providing their own ",(0,n.kt)("inlineCode",{parentName:"li"},"Key"),". If your Prefb needs to handle a ",(0,n.kt)("inlineCode",{parentName:"li"},"Username")," key specifiaclly, the ",(0,n.kt)("inlineCode",{parentName:"li"},"Save to localStorage")," component coul be used internally in another component in your Prefab with the ",(0,n.kt)("inlineCode",{parentName:"li"},"Username")," key already filled in."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Splitting up functionality"),": having separate components for ",(0,n.kt)("inlineCode",{parentName:"li"},"Init X Data"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"Get X Data"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"Set X Data")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"Clear X Data")," instead of one big ",(0,n.kt)("inlineCode",{parentName:"li"},"X Data")," component with all functionality built in."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Use as litle styling as possible"),": All the All Style Variants, Color Styles and Text Styles used in your exported comonents will be imported along with the prefab. Try using as much of the default styles as possible to minimize the cleanup the user needs to do. Of course, this varies from Prefab to Prefab, but many Prefabs will be imported for their functionality and then restyled to fit the project. Whenever possible, keep the styles related to functionality and not visual flare. This guideline gets more relevant the more data-oriented your Prefab is."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Prefix the component names"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"Xano Prefab - Log In"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"Xano Prefab - Log Out")," etc. will make it easier to search for in the Node Picker, and prevent import conflicts if the project already includes a component called ",(0,n.kt)("inlineCode",{parentName:"li"},"Log In"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Use a separate sheet for the Prefab"),": To further prevent import conflicts it's good to build your Prefab in a separate sheet, instead of keeping it in the ",(0,n.kt)("inlineCode",{parentName:"li"},"Default")," one."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Consider using existing Noodl conventions"),": This would include calling signals things like ",(0,n.kt)("inlineCode",{parentName:"li"},"Do"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"Success")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"Failure"),", trying to model your components after the core nodes in Noodl, etc. This will make it easier for users to pick up how the components work if they are already familiar with Noodl."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Quality assurance"),": The Prefab you build will be shipped to end users everywhere. Make sure the quality and performance of your Prefab is as high as possible."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Add comments in your components"),": This will make it easier for users to use the Prefab without having to reference the docs. This will also help them to understand how the Prefab is built should they need to make any modifications to the components in their project.")),(0,n.kt)("p",null,"For a good example of how this can look in practice, clone and check out how the ",(0,n.kt)("inlineCode",{parentName:"p"},"Xano")," Prefab is built."),(0,n.kt)("h2",{id:"exporting-the-prefab"},"Exporting the Prefab"),(0,n.kt)("p",null,"When your Prefab is tested and ready to be published you will need to export it as a zip file. The best way to do this is to open the project of your Prefab and pressing ",(0,n.kt)("inlineCode",{parentName:"p"},"Ctrl/Cmd + Shift + E"),". This will bring up the export popup:"),(0,n.kt)("div",{className:"ndl-image-with-background l"},(0,n.kt)("p",null,(0,n.kt)("img",{src:o(61455).Z,width:"1008",height:"1406"}))),(0,n.kt)("p",null,"Select the components you want your Prefab to include, scroll to the bottom, and click ",(0,n.kt)("inlineCode",{parentName:"p"},"Export"),". This will also automatically select all dependencies those components have, such as Style Variants, Color Styles and Text Styles, Fonts, Images and other components."),(0,n.kt)("p",null,"This will open up a file explorer window and you will be prompted to name the file. A good best practiche here is to name it with dashes and a version number, like so: ",(0,n.kt)("inlineCode",{parentName:"p"},"list-with-icons-prefab-1-0.zip"),". This will make it browser safe, and will allow you to know what iteration of the prefab that has been exported."),(0,n.kt)("h2",{id:"cloning-the-docs-repo"},"Cloning the docs repo"),(0,n.kt)("p",null,"To submit a pull request you first need to clone the docs repository from the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/noodlapp/noodl-docs"},"Noodl Docs Github"),". If you are new to Git it can be helpful to use a visual Git client. A good alternative is ",(0,n.kt)("a",{parentName:"p",href:"https://desktop.github.com/"},"Github Desktop"),", as it is both free and tightly coupled to the Gihub workflow. ",(0,n.kt)("a",{parentName:"p",href:"https://docs.github.com/en/desktop/overview/getting-started-with-github-desktop"},"Here")," is a guide to get you started, pay extra attention to what they say about ",(0,n.kt)("strong",{parentName:"p"},"branches"),"."),(0,n.kt)("p",null,"All pull requests for the Noodl Docs need to be done through feature branches - preferrably one branch per Prefab, as this will make it easier to keep track of."),(0,n.kt)("h2",{id:"making-changes"},"Making changes"),(0,n.kt)("p",null,"Once you have created a new branch, you're good to go to start making changes."),(0,n.kt)("p",null,"There are 4 files and folders you need to know about."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/library/prefabs/"),": Where a folder with your Prefab docs will live."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/static/library/prefabs/"),": Where any assets for your Prefab docs will live, like images or the exported zip-file."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/static/library/prefabs/index.json"),": Where you will link your Prefab for it to be available in the Node Picker."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"sidebarsLibrary.js"),": Where you will set up the sidebar menu for your Prefab docs.")),(0,n.kt)("p",null,"We will expand on this later on in this guide."),(0,n.kt)("h2",{id:"writing-the-docs"},"Writing the docs"),(0,n.kt)("p",null,"It's important for your prefab to have good docs, not only so that people can learn how to use the Prefab, but also for them to be able to find it outside of the Noodl editor."),(0,n.kt)("p",null,"To streamline this process as much as possible, you can download a zip-file with boilerplate docs ",(0,n.kt)("a",{target:"_blank",href:o(67806).Z},"here"),"."),(0,n.kt)("h3",{id:"boilerplate-structure"},"Boilerplate structure"),(0,n.kt)("p",null,"In the boilerplate folder you will find a folder named ",(0,n.kt)("inlineCode",{parentName:"p"},"docs-starter"),". In it you will find two folders."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"markdown"),": Contains the files that should be placed in their own folder in ",(0,n.kt)("inlineCode",{parentName:"li"},"/library/prefabs/")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"assets"),": Contains the files that should be placed in their own folder in ",(0,n.kt)("inlineCode",{parentName:"li"},"/static/library/prefabs/"),".")),(0,n.kt)("p",null,"Noodl docs are written in ",(0,n.kt)("a",{parentName:"p",href:"https://www.markdownguide.org/cheat-sheet/"},"Markdown"),". In addition to the Markdown standards there are a couple of CSS classes that are good to know. These are documented in the starter files."),(0,n.kt)("h3",{id:"linking-it-up"},"Linking it up"),(0,n.kt)("p",null,"The easiest way to write and preview your Prefab docs is to drop the folders in ",(0,n.kt)("inlineCode",{parentName:"p"},"docs-starter")," in the correct folders and rename the folders to the name of your Prefab."),(0,n.kt)("p",null,"After that you need to make sure that you can navigate to them. This is where the file ",(0,n.kt)("inlineCode",{parentName:"p"},"/static/library/prefabs/index.json")," comes in. In your downloaded boilerplate folder you will find a file named ",(0,n.kt)("inlineCode",{parentName:"p"},"add-to-prefabs-index.json"),". In it you find a JSON object that you can copy and paste at the bottom of the array in the ",(0,n.kt)("inlineCode",{parentName:"p"},"/static/library/prefabs/index.json")," file."),(0,n.kt)("p",null,"When this is done you can open up the terminal in the root of the docs repo and run ",(0,n.kt)("inlineCode",{parentName:"p"},"npm i")," to install, and then ",(0,n.kt)("inlineCode",{parentName:"p"},"npm run start"),". This will start up a local server with Docusaurus and open a new browser tab where you can preview your local version of the docs. Whenever you save any changes in the filebase, the preview will reload."),(0,n.kt)("p",null,"In the browser, navigate to the ",(0,n.kt)("strong",{parentName:"p"},"Library")," page and click the ",(0,n.kt)("strong",{parentName:"p"},"Prefabs")," section in the sidebar. Your Prefab should now be at the bottom of the list."),(0,n.kt)("h3",{id:"prefab-doc-structure"},"Prefab doc structure"),(0,n.kt)("p",null,"When the boilerplate ",(0,n.kt)("inlineCode",{parentName:"p"},"markdown")," folder has been renamed and dropped in the ",(0,n.kt)("inlineCode",{parentName:"p"},"/library/prefabs/")," folder, it should look something like this:"),(0,n.kt)("div",{className:"ndl-image-with-background"},(0,n.kt)("p",null,(0,n.kt)("img",{src:o(1279).Z,width:"406",height:"778"}))),(0,n.kt)("p",null,"If you look at the structure you see a ",(0,n.kt)("inlineCode",{parentName:"p"},"README.md")," in the root of the Prefab docs. This is meant to be a summary of the whole Prefab. You also see a folder named ",(0,n.kt)("inlineCode",{parentName:"p"},"components"),". This includes specific docs for every component that is included in your Prefab. It's recommended that you keep your Prefab docs structured like this, as it makes them easier to reference."),(0,n.kt)("p",null,"For a good example of how a Prefab doc can be written, please check out the ",(0,n.kt)("a",{parentName:"p",href:"/library/prefabs/xano"},"Xano Prefab")," is written and structured."),(0,n.kt)("h3",{id:"creating-a-sidebar"},"Creating a sidebar"),(0,n.kt)("p",null,"If you browse to the Prefab now, you will see your docs, but you might notice that the sidebar is missing. This is because you need to edit one last file: ",(0,n.kt)("inlineCode",{parentName:"p"},"sidebarsLibrary.js"),"."),(0,n.kt)("p",null,"In your downloaded boilerplate folder you will find a file named ",(0,n.kt)("inlineCode",{parentName:"p"},"add-to-sidebarsLibrary.js"),". This contains a JS array that represents the sidebar. Copy and paste it at the very bottom of the object in ",(0,n.kt)("inlineCode",{parentName:"p"},"sidebarsLibrary.js"),"."),(0,n.kt)("p",null,'It is recommended that you keep the base structure the way it is, with an overview, a category for components and a "Back to prefabs" link at the end. However, if your Prefab has many components it could be good to split them up into separate categories, groupling the components in whatever way is logical for your Prefab. Additionally, if your Prefab requires any external setup (with a third party provider, etc.) it can be a good idea to include a guide on it in the root of the Prefab docs, right after the ',(0,n.kt)("em",{parentName:"p"},"Overview")," page."),(0,n.kt)("h2",{id:"pull-request-time"},"Pull request time!"),(0,n.kt)("p",null,"When all docs are written you need to check that everything builds smoothly. You can do this by running ",(0,n.kt)("inlineCode",{parentName:"p"},"npm run build")," in the root folder of the docs in the terminal, when that is done you need to run ",(0,n.kt)("inlineCode",{parentName:"p"},"npm run serve"),", open the local docs in a browser and check that your Prefab docs look like they should."),(0,n.kt)("p",null,"Then it's time to submit a pull request! Commit and push your changes to your Git branch, and then submit the pull request, either on Github or in your Git client (it if supports requests)."),(0,n.kt)("p",null,"Your pull request will then be reviewed by the Noodl team, and published as soon as it has passed!"))}h.isMDXComponent=!0},67806:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/files/prefab-docs-boilerplate-c4dab3d7fbcac96ec5b255aa5599e6f4.zip"},61455:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/export-popup-a466544f66cd37e8e5e991d5041b9cab.png"},1279:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/file-structure-21c94d54e8960c1db549875c5595945f.png"}}]);