"use strict";(self.webpackChunknoodl_docs=self.webpackChunknoodl_docs||[]).push([[6124],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return u}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(t),u=o,f=p["".concat(l,".").concat(u)]||p[u]||d[u]||a;return t?r.createElement(f,i(i({ref:n},m),{},{components:t})):r.createElement(f,i({ref:n},m))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},58446:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=t(83117),o=t(80102),a=(t(67294),t(3905)),i=["components"],s={},l=void 0,c={unversionedId:"modules/mapbox/guides/3d-model",id:"modules/mapbox/guides/3d-model",title:"3d-model",description:"https://docs.mapbox.com/mapbox-gl-js/example/add-3d-model/",source:"@site/library/modules/mapbox/guides/3d-model.md",sourceDirName:"modules/mapbox/guides",slug:"/modules/mapbox/guides/3d-model",permalink:"/2.9/library/modules/mapbox/guides/3d-model",tags:[],version:"current",frontMatter:{}},m={},d=[],p={toc:d};function u(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/mapbox-gl-js/example/add-3d-model/"},"https://docs.mapbox.com/mapbox-gl-js/example/add-3d-model/")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const map = Inputs.map;\n\n// parameters to ensure the model is georeferenced correctly on the map\nconst modelOrigin = [148.9819, -35.39847];\nconst modelAltitude = 0;\nconst modelRotate = [Math.PI / 2, 0, 0];\n\nconst modelAsMercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat(\n    modelOrigin,\n    modelAltitude\n);\n\n// transformation parameters to position, rotate and scale the 3D model onto the map\nconst modelTransform = {\n    translateX: modelAsMercatorCoordinate.x,\n    translateY: modelAsMercatorCoordinate.y,\n    translateZ: modelAsMercatorCoordinate.z,\n    rotateX: modelRotate[0],\n    rotateY: modelRotate[1],\n    rotateZ: modelRotate[2],\n    /* Since the 3D model is in real world meters, a scale transform needs to be\n    * applied since the CustomLayerInterface expects units in MercatorCoordinates.\n    */\n    scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()\n};\n\nconst THREE = window.THREE;\n\n// configuration of the custom layer for a 3D model per the CustomLayerInterface\nconst customLayer = {\n    id: '3d-model',\n    type: 'custom',\n    renderingMode: '3d',\n    onAdd: function (map, gl) {\n        this.camera = new THREE.Camera();\n        this.scene = new THREE.Scene();\n\n        // create two three.js lights to illuminate the model\n        const directionalLight = new THREE.DirectionalLight(0xffffff);\n        directionalLight.position.set(0, -70, 100).normalize();\n        this.scene.add(directionalLight);\n\n        const directionalLight2 = new THREE.DirectionalLight(0xffffff);\n        directionalLight2.position.set(0, 70, 100).normalize();\n        this.scene.add(directionalLight2);\n\n        // use the three.js GLTF loader to add the 3D model to the three.js scene\n        const loader = new THREE.GLTFLoader();\n        loader.load(\n            'https://docs.mapbox.com/mapbox-gl-js/assets/34M_17/34M_17.gltf',\n            (gltf) => {\n                this.scene.add(gltf.scene);\n            }\n        );\n        this.map = map;\n\n        // use the Mapbox GL JS map canvas for three.js\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: map.getCanvas(),\n            context: gl,\n            antialias: true\n        });\n\n        this.renderer.autoClear = false;\n    },\n    render: function (gl, matrix) {\n        const rotationX = new THREE.Matrix4().makeRotationAxis(\n            new THREE.Vector3(1, 0, 0),\n            modelTransform.rotateX\n        );\n        const rotationY = new THREE.Matrix4().makeRotationAxis(\n            new THREE.Vector3(0, 1, 0),\n            modelTransform.rotateY\n        );\n        const rotationZ = new THREE.Matrix4().makeRotationAxis(\n            new THREE.Vector3(0, 0, 1),\n            modelTransform.rotateZ\n        );\n\n        const m = new THREE.Matrix4().fromArray(matrix);\n        const l = new THREE.Matrix4()\n            .makeTranslation(\n                modelTransform.translateX,\n                modelTransform.translateY,\n                modelTransform.translateZ\n            )\n            .scale(\n                new THREE.Vector3(\n                    modelTransform.scale,\n                    -modelTransform.scale,\n                    modelTransform.scale\n                )\n            )\n            .multiply(rotationX)\n            .multiply(rotationY)\n            .multiply(rotationZ);\n\n        this.camera.projectionMatrix = m.multiply(l);\n        this.renderer.resetState();\n        this.renderer.render(this.scene, this.camera);\n        this.map.triggerRepaint();\n    }\n};\n\nmap.addLayer(customLayer, 'waterway-label');\n")))}u.isMDXComponent=!0}}]);