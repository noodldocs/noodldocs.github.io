"use strict";(self.webpackChunknoodl_docs=self.webpackChunknoodl_docs||[]).push([[6824],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,g=d["".concat(c,".").concat(u)]||d[u]||m[u]||s;return n?a.createElement(g,o(o({ref:t},l),{},{components:n})):a.createElement(g,o({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93441:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const s={title:"Receive Message",hide_title:!0},o=void 0,i={unversionedId:"modules/mqtt/receive-message",id:"modules/mqtt/receive-message",title:"Receive Message",description:"Receive Message nodes are used to receive messages sent over MQTT, by a Send Message node for example. Messages can be sent across devices and",source:"@site/library/modules/mqtt/receive-message.md",sourceDirName:"modules/mqtt",slug:"/modules/mqtt/receive-message",permalink:"/2.9/library/modules/mqtt/receive-message",draft:!1,tags:[],version:"current",frontMatter:{title:"Receive Message",hide_title:!0},sidebar:"mqttSidebar",previous:{title:"Send Message",permalink:"/2.9/library/modules/mqtt/send-message"}},c={},p=[{value:"Inputs",id:"inputs",level:2},{value:"Other",id:"other",level:3},{value:"Outputs",id:"outputs",level:2},{value:"PAYLOAD",id:"payload",level:3}],l={toc:p},d="wrapper";function m(e){let{components:t,...s}=e;return(0,r.kt)(d,(0,a.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,""),(0,r.kt)("h1",{id:"receive-message"},"Receive Message"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Receive Message")," nodes are used to receive messages sent over MQTT, by a ",(0,r.kt)("a",{parentName:"p",href:"/library/modules/mqtt/send-message"},(0,r.kt)("strong",{parentName:"a"},"Send Message"))," node for example. Messages can be sent across devices and\nbe used for inter-device communication and IoT. The ",(0,r.kt)("strong",{parentName:"p"},"Receive Message")," node subscribes to an MQTT topic and receives any message and payload published to that topic."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(69933).Z,width:"832",height:"522"}),"\n"),(0,r.kt)("div",{class:"node-inputs"},(0,r.kt)("h2",{id:"inputs"},"Inputs"),(0,r.kt)("h3",{id:"other"},"Other"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Topic"),"\nThe topic name can be any identifier and is used by the ",(0,r.kt)("strong",{parentName:"p"},"Receive Message")," nodes to connect sender and receiver nodes, or publishers and subscribers in MQTT. Most commonly the topics are specified as a hierarchy with ",(0,r.kt)("strong",{parentName:"p"},"/")," as delimiters, e.g. ",(0,r.kt)("em",{parentName:"p"},"/Foo/Bar/1"),". Sometimes the topics need to be dynamic, this can be achieved by encapsulating a topic component with curly brackets, e.g. ",(0,r.kt)("em",{parentName:"p"},"/Foo/{Bar}/1"),". In this case a port called ",(0,r.kt)("em",{parentName:"p"},"Bar")," will show up.\nTopics on ",(0,r.kt)("em",{parentName:"p"},"Receive Message")," can also be specified with wildcards, so for instance ",(0,r.kt)("em",{parentName:"p"},"/Foo/+/Bar")," will subscribe to both ",(0,r.kt)("em",{parentName:"p"},"/Foo/Hello/Bar")," and ",(0,r.kt)("em",{parentName:"p"},"/Foo/Goodbye/Bar"),".\nThe exact topic component used when sending the message can be retrieved in a similar way to dynamic topics, by specifying ",(0,r.kt)("em",{parentName:"p"},"/Foo/+X+/Bar")," an output port called ",(0,r.kt)("em",{parentName:"p"},"X")," will\nbe created that will hold the value of the topic component when the message is received."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Enabled"),"\nEnable and disable the ",(0,r.kt)("strong",{parentName:"p"},"Receive Message")," node.")),(0,r.kt)("div",{class:"node-outputs"},(0,r.kt)("h2",{id:"outputs"},"Outputs"),(0,r.kt)("h3",{id:"payload"},"PAYLOAD"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Receive Message")," nodes can have arbitrary output ports, payloads, that will assume the value of any incoming messages, for example a ",(0,r.kt)("a",{parentName:"p",href:"/library/modules/mqtt/send-message"},"Send Message")," node. These ports are referred to as payload ports.\nThese ports can be added by inspecting the node and clicking the ",(0,r.kt)("em",{parentName:"p"},"Add port")," button in the ",(0,r.kt)("em",{parentName:"p"},"Payload")," section."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Received"),"\nA signal triggered when a message is received.")))}m.isMDXComponent=!0},69933:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/receive-message-5fb7204013c29e17a92a9cab06640cad.png"}}]);