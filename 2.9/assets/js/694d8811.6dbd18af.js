"use strict";(self.webpackChunknoodl_docs=self.webpackChunknoodl_docs||[]).push([[1530],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,y=d["".concat(c,".").concat(m)]||d[m]||l[m]||a;return t?r.createElement(y,i(i({ref:n},p),{},{components:t})):r.createElement(y,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},81490:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return l}});var r=t(83117),o=t(80102),a=(t(67294),t(3905)),i=["components"],s={},c="Directions",u={unversionedId:"modules/mapbox/guides/directions",id:"modules/mapbox/guides/directions",title:"Directions",description:"Create a request to Directions API",source:"@site/library/modules/mapbox/guides/directions.md",sourceDirName:"modules/mapbox/guides",slug:"/modules/mapbox/guides/directions",permalink:"/2.9/library/modules/mapbox/guides/directions",tags:[],version:"current",frontMatter:{}},p={},l=[{value:"Create a request to Directions API",id:"create-a-request-to-directions-api",level:2}],d={toc:l};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"directions"},"Directions"),(0,a.kt)("h2",{id:"create-a-request-to-directions-api"},"Create a request to Directions API"),(0,a.kt)("p",null,'TODO: Add more info about "overview" (full, simplified, or false)'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Get the Mapbox access token from Noodl project settings\nconst access_token = Noodl.getProjectSettings().mapboxAccessToken;\n\n// For using the API to handle min/max road width, we have to use the "driving" profile.\n// https://docs.mapbox.com/api/navigation/directions#optional-parameters-for-the-mapboxdriving-profile\nconst routingProfile = "driving";\n\n// Encode the coordinates to be URL-safe\nconst coordinates = encodeURIComponent([fromCoordinate, toCoordinate].join(";"));\n\n// Define query parameters for the API request\n// \n// Playground by Mapbox to test out all the features:\n// https://docs.mapbox.com/playground/directions/\nconst queryParams = {\n    access_token, // Provide the access token\n    alternatives: true,\n    continue_straight: true,\n    geometries: "geojson",\n    language: "en",\n    overview: "simplified",\n    steps: true,\n    // The max vehicle height, in meters. If this parameter is provided, the\n    // Directions API will compute a route that includes only roads with a height\n    // limit greater than or equal to the max vehicle height. max_height must be\n    // between 0 and 10 meters. The default value is 1.6 meters. Coverage for road\n    // height restriction may vary by region.\n    max_height,\n    // The max vehicle width, in meters. If this parameter is provided, the\n    // Directions API will compute a route that includes only roads with a width\n    // limit greater than or equal to the max vehicle width. max_width must be\n    // between 0 and 10 meters. The default value is 1.9 meters. Coverage for road\n    // width restriction may vary by region.\n    max_width,\n};\n\n// Construct the query string from the query parameters\nconst query = Object.keys(queryParams)\n    .filter((key) => !!queryParams[key]) // Filter out empty values\n    .map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(queryParams[key])}`)\n    .join(\'&\');\n\n// Set the endpoint URL for the Mapbox directions API\nconst ENDPOINT = \'https://api.mapbox.com/directions/v5/mapbox\';\n\n// Make the API request and get the response as JSON\nconst response = await fetch(`${ENDPOINT}/${routingProfile}/${coordinates}?${query}`);\nconst json = await response.json();\n\nif (json.code === "Ok") {\n  Outputs.Routes = jsonroutes;\n  Outputs.Success();\n} else {\n  Outputs.Failure();\n}\n')),(0,a.kt)("p",null,"Draw the route:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Script.Inputs = {\n  MapboxObject: \"object\",\n  Routes: \"array\"\n};\n\nScript.Outputs = {\n  Done: \"signal\",\n};\n\n\nScript.Signals = {\n  Update() {\n    const map = Script.Inputs.MapboxObject;\n\n    const route = Script.Inputs.Routes[0];\n\n    function createOrUpdateSource(id, newSource) {\n      const source = map.getSource(id);\n      if (source) {\n        source.setData(newSource.data);\n      } else {\n        map.addSource(id, newSource);\n      }\n    }\n\n    function createOrUpdateLayer(newLayer) {\n      const layer = map.getLayer(newLayer.id);\n      if (layer) {\n        if (newLayer.paint) {\n          Object.keys(newLayer.paint).forEach((key) => {\n            layer.setPaintProperty(key, newLayer.paint[key]);\n          });\n        }\n      } else {\n        map.addLayer(newLayer);\n      }\n    }\n\n    createOrUpdateSource('route', {\n      'type': 'geojson',\n      'data': {\n        'type': 'Feature',\n        'properties': {},\n        'geometry': route.geometry,\n      }\n    });\n\n    createOrUpdateLayer({\n      'id': 'route',\n      'type': 'line',\n      'source': 'route',\n      'layout': {\n        'line-join': 'round',\n        'line-cap': 'round'\n      },\n      'paint': {\n        'line-color': '#888',\n        'line-width': 8\n      }\n    });\n  },\n};\n")))}m.isMDXComponent=!0}}]);