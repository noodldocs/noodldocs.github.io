"use strict";(self.webpackChunknoodl_docs=self.webpackChunknoodl_docs||[]).push([[1530],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(n),m=o,y=l["".concat(c,".").concat(m)]||l[m]||d[m]||a;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},90825:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const a={},i="Directions",s={unversionedId:"modules/mapbox/guides/directions",id:"modules/mapbox/guides/directions",title:"Directions",description:"Create a request to Directions API",source:"@site/library/modules/mapbox/guides/directions.md",sourceDirName:"modules/mapbox/guides",slug:"/modules/mapbox/guides/directions",permalink:"/2.9/library/modules/mapbox/guides/directions",draft:!1,tags:[],version:"current",frontMatter:{}},c={},u=[{value:"Create a request to Directions API",id:"create-a-request-to-directions-api",level:2}],p={toc:u},l="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"directions"},"Directions"),(0,o.kt)("h2",{id:"create-a-request-to-directions-api"},"Create a request to Directions API"),(0,o.kt)("p",null,'TODO: Add more info about "overview" (full, simplified, or false)'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Get the Mapbox access token from Noodl project settings\nconst access_token = Noodl.getProjectSettings().mapboxAccessToken;\n\n// For using the API to handle min/max road width, we have to use the "driving" profile.\n// https://docs.mapbox.com/api/navigation/directions#optional-parameters-for-the-mapboxdriving-profile\nconst routingProfile = "driving";\n\n// Encode the coordinates to be URL-safe\nconst coordinates = encodeURIComponent([fromCoordinate, toCoordinate].join(";"));\n\n// Define query parameters for the API request\n// \n// Playground by Mapbox to test out all the features:\n// https://docs.mapbox.com/playground/directions/\nconst queryParams = {\n    access_token, // Provide the access token\n    alternatives: true,\n    continue_straight: true,\n    geometries: "geojson",\n    language: "en",\n    overview: "simplified",\n    steps: true,\n    // The max vehicle height, in meters. If this parameter is provided, the\n    // Directions API will compute a route that includes only roads with a height\n    // limit greater than or equal to the max vehicle height. max_height must be\n    // between 0 and 10 meters. The default value is 1.6 meters. Coverage for road\n    // height restriction may vary by region.\n    max_height,\n    // The max vehicle width, in meters. If this parameter is provided, the\n    // Directions API will compute a route that includes only roads with a width\n    // limit greater than or equal to the max vehicle width. max_width must be\n    // between 0 and 10 meters. The default value is 1.9 meters. Coverage for road\n    // width restriction may vary by region.\n    max_width,\n};\n\n// Construct the query string from the query parameters\nconst query = Object.keys(queryParams)\n    .filter((key) => !!queryParams[key]) // Filter out empty values\n    .map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(queryParams[key])}`)\n    .join(\'&\');\n\n// Set the endpoint URL for the Mapbox directions API\nconst ENDPOINT = \'https://api.mapbox.com/directions/v5/mapbox\';\n\n// Make the API request and get the response as JSON\nconst response = await fetch(`${ENDPOINT}/${routingProfile}/${coordinates}?${query}`);\nconst json = await response.json();\n\nif (json.code === "Ok") {\n  Outputs.Routes = jsonroutes;\n  Outputs.Success();\n} else {\n  Outputs.Failure();\n}\n')),(0,o.kt)("p",null,"Draw the route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"Script.Inputs = {\n  MapboxObject: \"object\",\n  Routes: \"array\"\n};\n\nScript.Outputs = {\n  Done: \"signal\",\n};\n\n\nScript.Signals = {\n  Update() {\n    const map = Script.Inputs.MapboxObject;\n\n    const route = Script.Inputs.Routes[0];\n\n    function createOrUpdateSource(id, newSource) {\n      const source = map.getSource(id);\n      if (source) {\n        source.setData(newSource.data);\n      } else {\n        map.addSource(id, newSource);\n      }\n    }\n\n    function createOrUpdateLayer(newLayer) {\n      const layer = map.getLayer(newLayer.id);\n      if (layer) {\n        if (newLayer.paint) {\n          Object.keys(newLayer.paint).forEach((key) => {\n            layer.setPaintProperty(key, newLayer.paint[key]);\n          });\n        }\n      } else {\n        map.addLayer(newLayer);\n      }\n    }\n\n    createOrUpdateSource('route', {\n      'type': 'geojson',\n      'data': {\n        'type': 'Feature',\n        'properties': {},\n        'geometry': route.geometry,\n      }\n    });\n\n    createOrUpdateLayer({\n      'id': 'route',\n      'type': 'line',\n      'source': 'route',\n      'layout': {\n        'line-join': 'round',\n        'line-cap': 'round'\n      },\n      'paint': {\n        'line-color': '#888',\n        'line-width': 8\n      }\n    });\n  },\n};\n")))}d.isMDXComponent=!0}}]);