"use strict";(self.webpackChunknew_noodl_docs=self.webpackChunknew_noodl_docs||[]).push([[4713],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),i=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=i(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=i(r),m=n,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return r?o.createElement(f,s(s({ref:t},d),{},{components:r})):o.createElement(f,s({ref:t},d))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,s[1]=c;for(var i=2;i<a;i++)s[i]=r[i];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},23601:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p}});var o=r(83117),n=r(80102),a=(r(67294),r(3905)),s=["components"],c={hide_title:!0,hide_table_of_contents:!0,title:"Noodl.Records"},l="Noodl.Records",i={unversionedId:"reference/records",id:"reference/records",title:"Noodl.Records",description:"With Records you can query, read and write records to the cloud database. All functions are async and will throw an exception if they fail.",source:"@site/javascript/reference/records.md",sourceDirName:"reference",slug:"/reference/records",permalink:"/2.8/javascript/reference/records",tags:[],version:"current",frontMatter:{hide_title:!0,hide_table_of_contents:!0,title:"Noodl.Records"},sidebar:"apiSidebar",previous:{title:"Component",permalink:"/2.8/javascript/reference/component"},next:{title:"Noodl.Users",permalink:"/2.8/javascript/reference/users"}},d={},p=[],u={toc:p};function m(e){var t=e.components,r=(0,n.Z)(e,s);return(0,a.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"noodlrecords"},"Noodl.Records"),(0,a.kt)("p",null,"With ",(0,a.kt)("strong",{parentName:"p"},"Records")," you can query, read and write records to the cloud database. All functions are ",(0,a.kt)("strong",{parentName:"p"},"async")," and will throw an exception if they fail."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"try {\n    await Noodl.Records.delete(myRecord)\n}\ncatch(e) {\n    console.log(e)\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Noodl.Records.query(className,query,options)")),(0,a.kt)("br",{parentName:"p"}),"\n","This is an ",(0,a.kt)("strong",{parentName:"p"},"async")," function that will query the database using the query that you provide and return the result or throw an exception if failed. The ",(0,a.kt)("strong",{parentName:"p"},"query")," parameter has the same format as the ",(0,a.kt)("a",{parentName:"p",href:"/nodes/data/cloud-data/query-records#advanced-filters"},"advanced query")," of the ",(0,a.kt)("strong",{parentName:"p"},"Query Records")," node."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const results = await Noodl.Records.query("myClass",{\n    Completed: { equalTo: true },\n})\n')),(0,a.kt)("p",null,"The result is an array of ",(0,a.kt)("strong",{parentName:"p"},"Noodl.Object"),". The ",(0,a.kt)("strong",{parentName:"p"},"options")," can be used to specify sorting, it also follows the same pattern as the advanced filters of the ",(0,a.kt)("strong",{parentName:"p"},"Query Records")," node."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const results = await Noodl.Records.query(\"myClass\",{\n    Completed: { equalTo: true },\n},{\n    sort:['createdAt']\n})\n")),(0,a.kt)("p",null,"You can also specify the limit for how many records to return as a maximum (defaults to 100) with the ",(0,a.kt)("strong",{parentName:"p"},"limit")," option, and if you want the returned records to start from a given index specify the ",(0,a.kt)("strong",{parentName:"p"},"skip")," option."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const results = await Noodl.Records.query(\"myClass\",{\n    Completed: { equalTo: true },\n},{\n    sort:['-createdAt'], // use - to sort descending\n    skip:50,\n    limit:200\n})\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Noodl.Records.fetch(objectOrId,options)")),(0,a.kt)("br",{parentName:"p"}),"\n","Use this function to fetch the latest properties of a specific record from the cloud database. It will return the object / record."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// If you use the a record ID you must also specify the class\nconst myRecord = await Noodl.Records.fetch(myRecordId,{className:"myClass"})\n\n// You can also fetch a record you have previously fetched or received from a\n// query, to get the latest properties from the backend\nawait Noodl.Records.fetch(myRecord)\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Noodl.Records.save(objectOrId,properties,options)")),(0,a.kt)("br",{parentName:"p"}),"\n","Use this function to write an existing record to the cloud database. It will attempt to save all properties of the record / object if you don't specify the optional properties argument, if so it will set and save those properties."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'Noodl.Objects[myRecordId].SomeProperty = "hello"\n\n// If you use the record id to save, you need to specify the classname explicitly\n// by specfiying null or undefinded for properties it will save all proporties in\n// the record\nawait Noodl.Records.save(myRecordId,null,{className:"myClass"})\n\n// Or use the object directly\nawait Noodl.Records.save(Noodl.Objects[myRecordId])\n\n// Set specified properties and save only those to the backned\nawait Noodl.Records.save(myRecord,{\n    SomeProperty:\'hello\'\n})\n')),(0,a.kt)("p",null,"Using the options you can also specify access control as described in this ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/cloud-data/access-control"},"guide"),", this let's you control which users can access a specific record. The access control is specified as below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'await Noodl.Records.save(myRecord,null,{\n    acl:{\n        "*":{read:true,write:false}, // "*" means everyone, this rules gives everyone read access but not write\n        "a-user-id":{read:true,write:true}, // give a specific user write access\n        "role:a-role-name":{read:true,write:true}, // give a specific role write access\n    }\n})\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Noodl.Records.create(className,properties,options)")),(0,a.kt)("br",{parentName:"p"}),"\n","This function will create a new record in the cloud database and return the ",(0,a.kt)("strong",{parentName:"p"},"Noodl.Object")," of the newly created record. If it's unsuccessful it will throw an exception."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const myNewRecord = await Noodl.Records.create("myClass",{\n    SomeProperty:"Hello"\n})\n\nconsole.log(myNewRecord.SomeProperty)\n')),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("strong",{parentName:"p"},"options")," agrument to specify access control rules as detailed under ",(0,a.kt)("strong",{parentName:"p"},"Noodl.Records.save")," above."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Noodl.Records.delete(objectOrId,options)")),(0,a.kt)("br",{parentName:"p"}),"\n","Use this function to delete an existing record from the cloud database."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// If you specify the id of a record to be deleted, you must also provide the\n// class name in the options\nawait Noodl.Records.delete(myRecordId,{className:"myClass"})\n\n// Or use the object directly (provided it was previously fetched or received via a query)\nawait Noodl.Records.delete(Noodl.Objects[myRecordId])\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Noodl.Records.addRelation(className,options)")),(0,a.kt)("br",{parentName:"p"}),"\n","Use this function to add a relation between two records."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// You can either specify the Ids and classes directly\nawait Noodl.Records.addRelation({\n    className:"myClass",\n    recordId:"owning-record-id",\n    key:"the-relation-key-on-the-owning-record",\n    targetRecordId:"the-id-of-the-record-to-add-a-relation-to",\n    targetClassName:"the-class-of-the-target-record"\n})\n\n// Or if you already have two records that have been previously fetched or returned from a\n// query\nawait Noodl.Records.addRelation({\n    record:myRecord,\n    key:\'relation-key\',\n    targetRecord:theTargetRecord\n})\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Noodl.Records.removeRelation(className,options)")),(0,a.kt)("br",{parentName:"p"}),"\n","Use this function to remove a relation between two records."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// You can either specify the Ids and classes directly\nawait Noodl.Records.removeRelation({\n    className:"myClass",\n    recordId:"owning-record-id",\n    key:"the-relation-key-on-the-owning-record",\n    targetRecordId:"the-id-of-the-record-to-remove-a-relation-to",\n    targetClassName:"the-class-of-the-target-record"\n})\n\n// Or if you already have two records that have been previously fetched or returned from a\n// query\nawait Noodl.Records.removeRelation({\n    record:myRecord,\n    key:\'relation-key\',\n    targetRecord:theTargetRecord\n})\n')))}m.isMDXComponent=!0}}]);