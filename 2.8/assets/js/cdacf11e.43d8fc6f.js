"use strict";(self.webpackChunknoodl_docs=self.webpackChunknoodl_docs||[]).push([[2433],{3905:(e,t,i)=>{i.d(t,{Zo:()=>u,kt:()=>g});var n=i(67294);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function s(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?s(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):s(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function r(e,t){if(null==e)return{};var i,n,o=function(e,t){if(null==e)return{};var i,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)i=s[n],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)i=s[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var i=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=c(i),h=o,g=d["".concat(l,".").concat(h)]||d[h]||p[h]||s;return i?n.createElement(g,a(a({ref:t},u),{},{components:i})):n.createElement(g,a({ref:t},u))}));function g(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=i.length,a=new Array(s);a[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[d]="string"==typeof e?e:o,a[1]=r;for(var c=2;c<s;c++)a[c]=i[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}h.displayName="MDXCreateElement"},50121:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var n=i(87462),o=(i(67294),i(3905));const s={title:"Building Business Logic in Noodl",hide_title:!0},a="Building business logic in Noodl",r={unversionedId:"guides/business-logic/overview",id:"guides/business-logic/overview",title:"Building Business Logic in Noodl",description:"As you've seen in the previous chapters in these guides, two main parts of your App are the Data stored in your database and the UI that displays the data and let the user interact with it. The third part of your App us the Business Logic. This what ties your App together. Business logic can be many different things, for example",source:"@site/docs/guides/business-logic/overview.md",sourceDirName:"guides/business-logic",slug:"/guides/business-logic/overview",permalink:"/2.8/docs/guides/business-logic/overview",draft:!1,tags:[],version:"current",frontMatter:{title:"Building Business Logic in Noodl",hide_title:!0}},l={},c=[{value:"Client Side vs Cloud Side Business Logic",id:"client-side-vs-cloud-side-business-logic",level:2},{value:"Client side business logic",id:"client-side-business-logic",level:2},{value:"Business Logic in UI Components",id:"business-logic-in-ui-components",level:3},{value:"Cloud side business logic",id:"cloud-side-business-logic",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...i}=e;return(0,o.kt)(d,(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"building-business-logic-in-noodl"},"Building business logic in Noodl"),(0,o.kt)("p",null,"As you've seen in the previous chapters in these guides, two main parts of your App are the ",(0,o.kt)("strong",{parentName:"p"},"Data")," stored in your database and the ",(0,o.kt)("strong",{parentName:"p"},"UI")," that displays the data and let the user interact with it. The third part of your App us the ",(0,o.kt)("strong",{parentName:"p"},"Business Logic"),". This what ties your App together. Business logic can be many different things, for example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Data processing that compiles and re-shapes data from the database into something easy to interact with for the user, or vice versa, restructuring data from the UI to make it easy to store in the database."),(0,o.kt)("li",{parentName:"ul"},"Conditional logic that decides what the next step is for the user depending on user input, for example which page to navigate to."),(0,o.kt)("li",{parentName:"ul"},"Triggering of third party APIs, for example sending an email using an email server or processing a payment with a payment system.")),(0,o.kt)("h2",{id:"client-side-vs-cloud-side-business-logic"},"Client Side vs Cloud Side Business Logic"),(0,o.kt)("p",null,"On a high level your business logic can either execute ",(0,o.kt)("em",{parentName:"p"},"on the client"),", i.e. in the browser or App, or ",(0,o.kt)("em",{parentName:"p"},"in the cloud"),". Most of the time, it's pretty clear where business logic should execute. Conditional navigation or formatting of data to fit the UI controls is often best performed on the client, while operations requiring lots of database request are better performed in the cloud, to avoid sending huge amounts of data back and forth to the client."),(0,o.kt)("h2",{id:"client-side-business-logic"},"Client side business logic"),(0,o.kt)("p",null,"You use the Noodl editor to build the business logic on the client. You typically do it using nodes such as ",(0,o.kt)("a",{parentName:"p",href:"/nodes/math/expression"},"Expression"),", ",(0,o.kt)("a",{parentName:"p",href:"/nodes/utilities/logic/condition"},"Condition"),", ",(0,o.kt)("a",{parentName:"p",href:"/nodes/logic/switch"},"Switch")," and ",(0,o.kt)("a",{parentName:"p",href:"/nodes/utilities/logic/condition"},"States")," in combination with data processing nodes such as ",(0,o.kt)("a",{parentName:"p",href:"/nodes/data/array/insert-into-array"},"Insert Object Into Array")," or ",(0,o.kt)("a",{parentName:"p",href:"/nodes/data/object/set-object-properties"},"Set Object Properties")," and ",(0,o.kt)("a",{parentName:"p",href:"/nodes/navigation/navigate"},"navigation")," nodes."),(0,o.kt)("p",null,"If you know a little Javascript it's often a good idea to use Javascript directly to implement business logic, using the ",(0,o.kt)("a",{parentName:"p",href:"/nodes/javascript/function"},"Function")," or ",(0,o.kt)("a",{parentName:"p",href:"/nodes/javascript/script"},"Script")," nodes.  Especially for more complex data processing, Javascript is most often the best way to go."),(0,o.kt)("p",null,"You can read more about how to create such logic in these guides:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/guides/business-logic/client-side-biz-logic-nodes"},"Client Side Business Logic Using Nodes")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/guides/business-logic/client-side-biz-logic-js"},"Client Side Business Logic Using Javascript"))),(0,o.kt)("h3",{id:"business-logic-in-ui-components"},"Business Logic in UI Components"),(0,o.kt)("p",null,"More complex UI components need business logic on its own to keep track of its interal states and data. This logic need to be properly encapsulated into the component so the component can be re-used without risking affecting other parts of the App. You can read more about how to do this in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/business-logic/custom-ui-components"},"Custom UI Components guide"),"."),(0,o.kt)("h2",{id:"cloud-side-business-logic"},"Cloud side business logic"),(0,o.kt)("p",null,"Business logic happening on the cloud side works in a different way. You don't build it in the Noodl editor, although you can invoke it, for example using the ",(0,o.kt)("a",{parentName:"p",href:"/nodes/data/cloud-data/cloud-function"},"Cloud Function")," node."),(0,o.kt)("p",null,"There are three typical ways of building cloud side logic"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Implementing cloud functions and database triggers directly in the Parse Backend using the ",(0,o.kt)("a",{parentName:"li",href:"https://parseplatform.org/"},"Parse Platform SDK"),". For this to work, you'll have to host your own external backend and database. How you connect to an external backend is described in ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/deploy/using-an-external-backend"},"this guide"),". This requires good Javascript knowledge since Parse is based on Node.js."),(0,o.kt)("li",{parentName:"ul"},"Trigger Zaps in ",(0,o.kt)("a",{parentName:"li",href:"https://zapier.com"},"Zapier"),". Noodl is connected to the no code tool Zapier and its echo system with thousands of integrations. It enables you to integrate with many different 3rd party services, such as email and messaging services. Learn how to use Zapier from Noodl in ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/business-logic/zapier/"},"this")," guide."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Webhook"},"Webhooks"),". This enables Noodl to integrate with more or less any cloud service that can communicate through webhooks. This method is described in detail in the ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/business-logic/webhooks/"},"Webhooks Guide"),".")))}p.isMDXComponent=!0}}]);