"use strict";(self.webpackChunknoodl_docs=self.webpackChunknoodl_docs||[]).push([[4780],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(a),u=o,m=d["".concat(l,".").concat(u)]||d[u]||h[u]||r;return a?n.createElement(m,s(s({ref:t},p),{},{components:a})):n.createElement(m,s({ref:t},p))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},72822:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var n=a(87462),o=(a(67294),a(3905));a(53488);const r={title:"OpenAI",hide_title:!0},s="OpenAI",i={unversionedId:"prefabs/openai/README",id:"prefabs/openai/README",title:"OpenAI",description:"The OpenAI prefab is a great starting point for creating your own ChatBots based on the ChatGPI API. This prefab includes a few cloud functions and logic components that can get you started quickly. Here is a quick guide on how to use the prefab to build a very simple chat bot.",source:"@site/library/prefabs/openai/README.md",sourceDirName:"prefabs/openai",slug:"/prefabs/openai/",permalink:"/2.8/library/prefabs/openai/",draft:!1,tags:[],version:"current",frontMatter:{title:"OpenAI",hide_title:!0},sidebar:"OpenAISidebar"},l={},c=[{value:"Create new chat",id:"create-new-chat",level:2},{value:"Send message",id:"send-message",level:2},{value:"Improvements",id:"improvements",level:2}],p={toc:c},d="wrapper";function h(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"openai"},"OpenAI"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://openai.com"},"OpenAI")," prefab is a great starting point for creating your own ChatBots based on the ChatGPI API. This prefab includes a few cloud functions and logic components that can get you started quickly. Here is a quick guide on how to use the prefab to build a very simple chat bot."),(0,o.kt)("p",null,"To be able to follow this guide properly we recommend that you are well versed in a few Noodl concepts already."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cloud Data"),". You know how to set up cloud services and work with cloud data, start ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/cloud-data/creating-a-backend"},"here"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Cloud Functions"),", how to create logic that run in the cloud, take a look ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/cloud-logic/introduction"},"here"),".")),(0,o.kt)("p",null,"Make sure you have a cloud service active for your project. Next you need an account and API key for ",(0,o.kt)("a",{parentName:"p",href:"https://openai.com"},"OpenAI"),"."),(0,o.kt)("h1",{id:"setup"},"Setup"),(0,o.kt)("p",null,"Start by cloning the prefab into your project, you can read more about how prefabs work ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/user-interfaces/modules"},"here"),". After the prefab is cloned into your project you will see a bunch of warnings. Don't worry we will sort these out next."),(0,o.kt)("div",{className:"ndl-image-with-background l"},(0,o.kt)("p",null,(0,o.kt)("img",{src:a(39383).Z,width:"461",height:"180"}))),(0,o.kt)("p",null,"First you need to find and add the OpenAI API Key to your cloud services backend. Launch the cloud services dashboard for your project and find your way to the ",(0,o.kt)("strong",{parentName:"p"},"Config")," tab, here you will need to create a new config parameter called ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAIAPIKey")," (case sensitive) where you need to put the ",(0,o.kt)("strong",{parentName:"p"},"API Key")," from your ",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/account/usage"},"OpenAI Account"),". Then create the config in your cloud service, and make sure that access is restricted to ",(0,o.kt)("strong",{parentName:"p"},"Master Key Only"),". This will keep the API key safe in your cloud service."),(0,o.kt)("div",{className:"ndl-image-with-background xl"},(0,o.kt)("p",null,(0,o.kt)("img",{src:a(43068).Z,width:"546",height:"134"}))),(0,o.kt)("p",null,"Next you need to create two record classes in your cloud services, you can learn more about that ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/cloud-data/creating-a-class"},"here"),". You need these two classes and properties (make sure you use the exact names, case sensitive):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"OpenAIChat")," Create this class and add a single property, a pointer to the ",(0,o.kt)("inlineCode",{parentName:"li"},"_User")," class and call it ",(0,o.kt)("strong",{parentName:"li"},"User"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"OpenAIChatMessages")," Create this class and add three properties, two strings ",(0,o.kt)("strong",{parentName:"li"},"Role")," and ",(0,o.kt)("strong",{parentName:"li"},"Content"),", and a pointer to the ",(0,o.kt)("inlineCode",{parentName:"li"},"OpenAIChat")," class you just created and call it ",(0,o.kt)("strong",{parentName:"li"},"Chat"),".")),(0,o.kt)("p",null,"Completing these tasks should remove all warnings from your project and we can start building the first basic chat."),(0,o.kt)("h1",{id:"a-basic-chat"},"A basic chat"),(0,o.kt)("p",null,"Let's take a look at a basic chat. With the setup above in place we can move to the frontend component of the prefab. It includes a very basic chat frontend that you can put into your project as a starting point."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The cloud functions of the prefab require the user to be logged in so for this very basic example we are expecting there to be a user with username ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," and password ",(0,o.kt)("inlineCode",{parentName:"p"},"test"),". Either create a user with those credentials in your backend, or if you already have users in your app you can modify the example below.")),(0,o.kt)("p",null,"You can find it in the ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAI")," folder it's called ",(0,o.kt)("inlineCode",{parentName:"p"},"Basic Chat"),". Drag it into your app and lets review how it works below. Here is it's content."),(0,o.kt)("div",{className:"ndl-image-with-background xl"},(0,o.kt)("p",null,(0,o.kt)("img",{src:a(63349).Z,width:"1672",height:"1008"}))),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"When the parent group node is mounted (shown on screen) we log in with the test user (look at the note above). Once we have credentials we call the first cloud function ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAI/Create New Chat"),". We will review it in more detail below but this creates a new chat record, ",(0,o.kt)("strong",{parentName:"p"},"OpenAIChat"),", for us and some initial messages.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"When a new chat has been succesfully created we use the ",(0,o.kt)("strong",{parentName:"p"},"Id")," of the new chat to query all messages using the ",(0,o.kt)("a",{parentName:"p",href:"/nodes/data/cloud-data/query-records"},"Query Records")," set to the ",(0,o.kt)("strong",{parentName:"p"},"OpenAIChatMessages")," record class. We user a filter to only get the messages from the new chat, and we sort them in the right order. These are the properties of the query records node:"))),(0,o.kt)("div",{className:"ndl-image-with-background l"},(0,o.kt)("p",null,(0,o.kt)("img",{src:a(20009).Z,width:"600",height:"604"}))),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"The returned chat messages are then fed into a ",(0,o.kt)("a",{parentName:"li",href:"/nodes/ui-controls/repeater"},"Repeater")," that displays a list item for each chat message. This is what the simple chat frontend looks like:")),(0,o.kt)("div",{className:"ndl-image-with-background l"},(0,o.kt)("p",null,(0,o.kt)("img",{src:a(11345).Z,width:"822",height:"578"}))),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Finally when the submit button is clicked the cloud function ",(0,o.kt)("inlineCode",{parentName:"li"},"OpenAI/Send Message")," is called with the content of the text input and the the ",(0,o.kt)("strong",{parentName:"li"},"Id")," of the chat record. When the function has completed, the messages are queried again and displayed in the list. Try it out!")),(0,o.kt)("h2",{id:"create-new-chat"},"Create new chat"),(0,o.kt)("p",null,"Lets review some of the cloud functions so you can customize and build your own AI driven chat bot applications. There are two cloud functions used here, ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAI/Create New Chat")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAI/Send Message"),". The first function creates a new chat object and is actually mostly Noodl cloud data operations:"),(0,o.kt)("div",{className:"ndl-image-with-background xl"},(0,o.kt)("p",null,(0,o.kt)("img",{src:a(81059).Z,width:"1714",height:"886"}))),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"When the function is started it first creates a new chat record ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAIChat")," this is the parent record that we use to keep track of all messages. ")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Next it creates the system message. That is the first message of the chat and it tells the chat bot how it should behave. You can provide your own message by changing the ",(0,o.kt)("inlineCode",{parentName:"p"},"String")," node. All messages are records of type ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAIChatMessages")," and we provide the newly created chat ",(0,o.kt)("strong",{parentName:"p"},"Id")," when creating the system message."))),(0,o.kt)("div",{className:"ndl-image-with-background xl"},(0,o.kt)("p",null,(0,o.kt)("img",{src:a(15928).Z,width:"1638",height:"968"}))),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Then we create a second message which is what we want the AI assistants first welcome message to be. You can edit the message by editing the properties of the ",(0,o.kt)("inlineCode",{parentName:"li"},"Create New Record")," node. All messages have a ",(0,o.kt)("inlineCode",{parentName:"li"},"Role")," and a ",(0,o.kt)("inlineCode",{parentName:"li"},"Content")," property. The role can be one of ",(0,o.kt)("inlineCode",{parentName:"li"},"system"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"assistant"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"user")," and the content contains the content of the message.")),(0,o.kt)("div",{className:"ndl-image-with-background l"},(0,o.kt)("p",null,(0,o.kt)("img",{src:a(56883).Z,width:"604",height:"264"}))),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Now we have the system message and the first message in place we can respond from the function. We make sure to send the ",(0,o.kt)("strong",{parentName:"li"},"Chat Id")," back so we can use this later in the frontend when sending new messages.")),(0,o.kt)("h2",{id:"send-message"},"Send message"),(0,o.kt)("p",null,"The second cloud function is ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAI/Send Message")," and this is where we send new messages to the OpenAI API and store the response. The first part of the function looks like this:"),(0,o.kt)("div",{className:"ndl-image-with-background xl"},(0,o.kt)("p",null,(0,o.kt)("img",{src:a(52562).Z,width:"1596",height:"776"}))),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"First we receive the content from the request and we create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAIChatMessages")," record with the new content, this time we set the role to ",(0,o.kt)("inlineCode",{parentName:"p"},"user"),". Making sure we set the ",(0,o.kt)("inlineCode",{parentName:"p"},"Chat")," pointer to the ",(0,o.kt)("strong",{parentName:"p"},"Chat Id")," supplied with the request.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Next we query all messages we have up until this point, using a query records node and the ",(0,o.kt)("strong",{parentName:"p"}," Chat Id")," we got with the request. These will be fed into the OpenAI API."))),(0,o.kt)("div",{className:"ndl-image-with-background xl"},(0,o.kt)("p",null,(0,o.kt)("img",{src:a(10791).Z,width:"1534",height:"772"}))),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Here we feed the chat message into the logic component ",(0,o.kt)("inlineCode",{parentName:"p"},"Chat Completion")," that comes with the prefab. What this logic component does is that it asks OpenAI for the next message that should follow given the provided chat history.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"When it succeeds we create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAIChatMessages")," record, this time with the role ",(0,o.kt)("inlineCode",{parentName:"p"},"assistant")," and the content from the response we receive from OpenAI.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Now the function completed and the frontend updates by again fetching all messages in the chat."))),(0,o.kt)("h2",{id:"improvements"},"Improvements"),(0,o.kt)("p",null,"This prefab is meant to give you a starting point for building AI applications based on the OpenAI chat API. Here are a few pointers for how you can improve it."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Somtimes the ",(0,o.kt)("inlineCode",{parentName:"p"},"Chat Completion")," calls can take long and Noodl cloud functions have a timeout at 25s, but actually the keep running until completion and the message will be added to the database when completed. It can be an idea that if you get a timeout on the frontend to keep polling the database for a few seconds.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can also just return the latest message an add it to the list on the frontend, so you don't have to re-query the entire list every time a new message is added.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There is also a logic component called ",(0,o.kt)("inlineCode",{parentName:"p"},"Completion")," that uses the prompt completion API that OpenAI provides."))))}h.isMDXComponent=!0},53488:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294);function o(e){navigator.clipboard?navigator.clipboard.writeText(e).then((function(){console.log("Async: Copying to clipboard was successful!")}),(function(e){console.error("Async: Could not copy text: ",e)})):function(e){var t=document.createElement("textarea");t.value=e,t.style.top="0",t.style.left="0",t.style.position="fixed",document.body.appendChild(t),t.focus(),t.select();try{var a=document.execCommand("copy")?"successful":"unsuccessful";console.log("Fallback: Copying text command was "+a)}catch(n){console.error("Fallback: Oops, unable to copy",n)}document.body.removeChild(t)}(e)}function r(e){return n.createElement("button",{className:"ndl-copy-nodes-button",onClick:()=>{return t=e.json,void o(JSON.stringify(t));var t}})}},11345:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/basic-chat-ui-95acd5a027bf33003118cde0bb78c851.png"},63349:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/basicchat-a1197fb4d53331085c0fc35e67627730.png"},43068:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/config-param-4f7107faf45da15ff8c8f0896bdc0e1c.png"},81059:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/create-new-chat-1-161336e3429f86bf8a914125ee273002.png"},15928:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/create-new-chat-2-3346ae9a3ea18e33d4308d3be479c95b.png"},56883:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/create-new-chat-3-c0fab5a5b423a5e5412f6994d67ffbf1.png"},20009:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/filters-and-sort-5bf9936ff4ba1da37367920e14e05ec7.png"},52562:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/send-message-1-682a2289e2cd6d6589c26ac135eb1886.png"},10791:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/send-message-2-b6787aa53a882b7b8ac43f6e8840dc17.png"},39383:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/warnings-8f7e089f6b9b65c7a74790a779de49b3.png"}}]);