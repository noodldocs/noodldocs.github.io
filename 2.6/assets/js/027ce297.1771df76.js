"use strict";(self.webpackChunknew_noodl_docs=self.webpackChunknew_noodl_docs||[]).push([[8757],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return u}});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=l(a),u=o,h=d["".concat(p,".").concat(u)]||d[u]||c[u]||r;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},23705:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var n=a(83117),o=a(80102),r=(a(67294),a(3905)),i=["components"],s={title:"Records Relationships",hide_title:!0},p="Record Relationships",l={unversionedId:"guides/cloud-data/record-relations",id:"guides/cloud-data/record-relations",title:"Records Relationships",description:"What you will learn in this guide",source:"@site/docs/guides/cloud-data/record-relations.md",sourceDirName:"guides/cloud-data",slug:"/guides/cloud-data/record-relations",permalink:"/2.6/docs/guides/cloud-data/record-relations",tags:[],version:"current",frontMatter:{title:"Records Relationships",hide_title:!0},sidebar:"docsSidebar",previous:{title:"Filtering Database Queries",permalink:"/2.6/docs/guides/cloud-data/filtering-database-queries"},next:{title:"Access Control",permalink:"/2.6/docs/guides/cloud-data/access-control"}},m={},c=[{value:"What you will learn in this guide",id:"what-you-will-learn-in-this-guide",level:2},{value:"Overview",id:"overview",level:2},{value:"Relationships between Records",id:"relationships-between-records",level:2},{value:"Pointers - One-to-many relationships",id:"pointers---one-to-many-relationships",level:2},{value:"Relation - Many-to-many relationships",id:"relation---many-to-many-relationships",level:2}],d={toc:c};function u(e){var t=e.components,s=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"record-relationships"},"Record Relationships"),(0,r.kt)("h2",{id:"what-you-will-learn-in-this-guide"},"What you will learn in this guide"),(0,r.kt)("p",null,"In this guide we will look into relationships between different ",(0,r.kt)("strong",{parentName:"p"},"Records")," in the database. This could for example be a ",(0,r.kt)("em",{parentName:"p"},"pointer")," stored in a ",(0,r.kt)("strong",{parentName:"p"},"Record")," that points to another ",(0,r.kt)("strong",{parentName:"p"},"Record"),'. It could also be a "Many to Many" relationship where an ',(0,r.kt)("strong",{parentName:"p"},"Record")," can have a list of ",(0,r.kt)("em",{parentName:"p"},"pointers")," to other ",(0,r.kt)("strong",{parentName:"p"},"Records"),"."),(0,r.kt)("p",null,"This is very useful when you deal with ",(0,r.kt)("em",{parentName:"p"},"relational data"),", for example if you have a Post ",(0,r.kt)("strong",{parentName:"p"},"Class")," in your database, and you want to keep track of all the ",(0,r.kt)("strong",{parentName:"p"},"Users")," (another ",(0,r.kt)("strong",{parentName:"p"},"Class"),") that liked that post, a ",(0,r.kt)("strong",{parentName:"p"},"Post")," record can store relations to those Users in a property."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"We will first look at ",(0,r.kt)("strong",{parentName:"p"},"Pointers"),", i.e. a ",(0,r.kt)("em",{parentName:"p"},"One-to-many")," relationship. Then we will look at ",(0,r.kt)("strong",{parentName:"p"},"Relations"),", i.e. ",(0,r.kt)("em",{parentName:"p"},"Many-to-many relationshipts"),"."),(0,r.kt)("p",null,"It's recommended that you have some experience working with Backends, Databases and ",(0,r.kt)("strong",{parentName:"p"},"Records")," to get most out of this guide, so if you haven't already, going through the following guides before is recommended."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guides/cloud-data/creating-a-backend"},"Creating a Backend")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guides/cloud-data/creating-a-class"},"Creating a Class")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guides/cloud-data/creating-new-database-records"},"Creating Records"))),(0,r.kt)("h2",{id:"relationships-between-records"},"Relationships between Records"),(0,r.kt)("p",null,"If we imagine an App where we have a couple of different ",(0,r.kt)("strong",{parentName:"p"},"Classes"),", say a ",(0,r.kt)("em",{parentName:"p"},"Post")," Class that contains blog posts and a ",(0,r.kt)("em",{parentName:"p"},"Comment")," Class with comments on these post. The ",(0,r.kt)("strong",{parentName:"p"},"Records")," in these classes need to be related and we need to be able to query these relations."),(0,r.kt)("h2",{id:"pointers---one-to-many-relationships"},"Pointers - One-to-many relationships"),(0,r.kt)("p",null,"The most simple relationship is a ",(0,r.kt)("strong",{parentName:"p"},"Pointer"),". This type of relationship is often referred to as a ",(0,r.kt)("em",{parentName:"p"},"One-to-many")," relationship. For example, a blog ",(0,r.kt)("em",{parentName:"p"},"Post")," will have many ",(0,r.kt)("em",{parentName:"p"},"Comment"),"s, but each ",(0,r.kt)("em",{parentName:"p"},"Comment")," only belong to one ",(0,r.kt)("em",{parentName:"p"},"Post"),". To create this kind of relationship we use a property of a special kind called a ",(0,r.kt)("strong",{parentName:"p"},"Pointer"),"."),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"Pointer")," property can reference another ",(0,r.kt)("strong",{parentName:"p"},"Record")," of a certain Class via it's ",(0,r.kt)("em",{parentName:"p"},"Id"),". In this case we want to reference the ",(0,r.kt)("em",{parentName:"p"},"Post")," that is the owner of a ",(0,r.kt)("em",{parentName:"p"},"Comment"),". So in the ",(0,r.kt)("em",{parentName:"p"},"Comment")," class we create a property, let's call it ",(0,r.kt)("inlineCode",{parentName:"p"},"Owner"),", and give it a ",(0,r.kt)("em",{parentName:"p"},"Pointer")," type and specify that it should point to ",(0,r.kt)("em",{parentName:"p"},"Post")," records."),(0,r.kt)("p",null,"?> This is called a ",(0,r.kt)("em",{parentName:"p"},"backward")," relationship, i.e. the ",(0,r.kt)("em",{parentName:"p"},"Comment")," points back to the ",(0,r.kt)("em",{parentName:"p"},"Post"),". If you want to find all ",(0,r.kt)("em",{parentName:"p"},"Comments")," for ",(0,r.kt)("em",{parentName:"p"},"Post")," you will simply look for all ",(0,r.kt)("em",{parentName:"p"},"Comments")," pointing back to the ",(0,r.kt)("em",{parentName:"p"},"Post")," you are interested in."),(0,r.kt)("div",{className:"ndl-image-with-background"},(0,r.kt)("p",null,(0,r.kt)("img",{src:a(64318).Z,width:"1170",height:"708"}))),(0,r.kt)("p",null,"Now to set the pointer you can pass in the ",(0,r.kt)("strong",{parentName:"p"},"id")," of a ",(0,r.kt)("strong",{parentName:"p"},"Post")," Record. You could for example do this when you create a new ",(0,r.kt)("em",{parentName:"p"},"Comment")," ",(0,r.kt)("strong",{parentName:"p"},"Record")," . It's important the the ",(0,r.kt)("strong",{parentName:"p"},"Record")," you point to is of the right type. In this case a ",(0,r.kt)("em",{parentName:"p"},"Post"),"."),(0,r.kt)("div",{className:"ndl-image-with-background l"},(0,r.kt)("p",null,(0,r.kt)("img",{src:a(10216).Z,width:"1466",height:"534"}))),(0,r.kt)("p",null,"Later, if you want to retrieve all the ",(0,r.kt)("em",{parentName:"p"},"Comments")," for a ",(0,r.kt)("em",{parentName:"p"},"Post")," you simply use a ",(0,r.kt)("strong",{parentName:"p"},"Query Records")," node and ask for all ",(0,r.kt)("strong",{parentName:"p"},"Comments")," where the ",(0,r.kt)("strong",{parentName:"p"},"Owner")," property points to the specific comment."),(0,r.kt)("div",{className:"ndl-image-with-background l"},(0,r.kt)("p",null,(0,r.kt)("img",{src:a(93731).Z,width:"1354",height:"1056"}))),(0,r.kt)("p",null,"The specific ",(0,r.kt)("strong",{parentName:"p"},"id")," we are looking for, we provide through an input."),(0,r.kt)("div",{className:"ndl-image-with-background l"},(0,r.kt)("p",null,(0,r.kt)("img",{src:a(74692).Z,width:"1474",height:"634"}))),(0,r.kt)("p",null,"You can inspect your relationships in the data browser, if you go ahead and open the ",(0,r.kt)("em",{parentName:"p"},"Dashboard")," for the cloud services and find the ",(0,r.kt)("em",{parentName:"p"},"Comment")," Class. There you can see the record ",(0,r.kt)("em",{parentName:"p"},"Id")," that the pointer currently points to, and you can click it to jump to that particular record."),(0,r.kt)("div",{className:"ndl-image-with-background"},(0,r.kt)("p",null,(0,r.kt)("img",{src:a(71099).Z,width:"816",height:"376"}))),(0,r.kt)("h2",{id:"relation---many-to-many-relationships"},"Relation - Many-to-many relationships"),(0,r.kt)("p",null,"Let's say that we introduce a new ",(0,r.kt)("strong",{parentName:"p"},"Class")," called ",(0,r.kt)("em",{parentName:"p"},"Group"),", and a ",(0,r.kt)("em",{parentName:"p"},"Post")," can be part of many different ",(0,r.kt)("em",{parentName:"p"},"Group"),"s. In this case we cannot use the backwards pointing mechanism from the previous example. One single pointer from the ",(0,r.kt)("em",{parentName:"p"},"Post")," to the ",(0,r.kt)("em",{parentName:"p"},"Group")," would not work, since a ",(0,r.kt)("em",{parentName:"p"},"Post")," can be part of many ",(0,r.kt)("em",{parentName:"p"},"Groups"),". Instead we need to use a concept called ",(0,r.kt)("strong",{parentName:"p"},"Relation"),". You need to start by creating a new property of the ",(0,r.kt)("em",{parentName:"p"},"Group")," ",(0,r.kt)("strong",{parentName:"p"},"Record")," that have the type ",(0,r.kt)("em",{parentName:"p"},"Relation")," and like pointers you need to specify the ",(0,r.kt)("em",{parentName:"p"},"Type")," and give it a name."),(0,r.kt)("p",null,"?> So in this case it becomes a ",(0,r.kt)("em",{parentName:"p"},"forward")," reference, the ",(0,r.kt)("em",{parentName:"p"},"Group")," has the relation property."),(0,r.kt)("div",{className:"ndl-image-with-background"},(0,r.kt)("p",null,(0,r.kt)("img",{src:a(39018).Z,width:"1154",height:"720"}))),(0,r.kt)("p",null,"It can be a bit tricky in the beginning to get the hang of relations. One way to look at it is this: In this example, A ",(0,r.kt)("em",{parentName:"p"},"Group")," have a list of pointers to all its ",(0,r.kt)("em",{parentName:"p"},"Posts")," that belongs to it. So a specific ",(0,r.kt)("em",{parentName:"p"},"Group")," can easily find its ",(0,r.kt)("em",{parentName:"p"},"Posts")," by following these pointers. The inverse question, a ",(0,r.kt)("em",{parentName:"p"},"Post")," who wants to know which ",(0,r.kt)("em",{parentName:"p"},"Groups")," it belongs to (it can be more than one!) can query for all ",(0,r.kt)("em",{parentName:"p"},"Groups")," that have a pointer in its list that's pointing at them."),(0,r.kt)("p",null,"When you have a ",(0,r.kt)("em",{parentName:"p"},"Relation")," property on a ",(0,r.kt)("strong",{parentName:"p"},"Record")," you need to use the nodes ",(0,r.kt)("a",{parentName:"p",href:"/nodes/data/cloud-data/add-record-relation"},"Add Record Relation")," and ",(0,r.kt)("a",{parentName:"p",href:"/nodes/data/cloud-data/remove-record-relation"},"Remove Record Relation")," to manage them. In these nodes you need to provide the ",(0,r.kt)("strong",{parentName:"p"},"id")," of the ",(0,r.kt)("strong",{parentName:"p"},"Record")," that has the relation property (Group in our case) and the ",(0,r.kt)("strong",{parentName:"p"},"id")," of the ",(0,r.kt)("strong",{parentName:"p"},"Record")," you want to add or remove to the relationship."),(0,r.kt)("div",{className:"ndl-image-with-background"},(0,r.kt)("p",null,(0,r.kt)("img",{src:a(10573).Z,width:"554",height:"464"}))),(0,r.kt)("div",{className:"ndl-image-with-background l"},(0,r.kt)("p",null,(0,r.kt)("img",{src:a(60277).Z,width:"1620",height:"526"}))),(0,r.kt)("p",null,"In the same manner as with ",(0,r.kt)("em",{parentName:"p"},"Pointers")," you can go to the ",(0,r.kt)("em",{parentName:"p"},"Dashboard")," of the cloud services and find the relations of your models in the table. You can click ",(0,r.kt)("em",{parentName:"p"},"View relation")," to get a table of the relations for this particular model."),(0,r.kt)("div",{className:"ndl-image-with-background"},(0,r.kt)("p",null,(0,r.kt)("img",{src:a(50644).Z,width:"550",height:"322"}))),(0,r.kt)("p",null,"Finally you need to be able to query the relations. You have two cases:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Either you want to find all ",(0,r.kt)("em",{parentName:"li"},"Post")," that are related to a ",(0,r.kt)("em",{parentName:"li"},"Group"),". The you should create a ",(0,r.kt)("strong",{parentName:"li"},"Query Records")," of the class ",(0,r.kt)("em",{parentName:"li"},"Post")," (you want ",(0,r.kt)("em",{parentName:"li"},"Posts")," back from the query). You can then set up the filter according to the image below")),(0,r.kt)("div",{className:"ndl-image-with-background l"},(0,r.kt)("p",null,(0,r.kt)("img",{src:a(40573).Z,width:"1920",height:"784"}))),(0,r.kt)("p",null,"Note that you have to specify the name of the relation property in the class having the property (",(0,r.kt)("em",{parentName:"p"},"Group")," in this case) as well."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"If you want to make the inverse query, that is you want to ask for all ",(0,r.kt)("em",{parentName:"li"},"Groups")," that relates to a post, you create a ",(0,r.kt)("strong",{parentName:"li"},"Query Records")," node with the class ",(0,r.kt)("em",{parentName:"li"},"Group")," (you want ",(0,r.kt)("em",{parentName:"li"},"Groups")," back from the query). have a ",(0,r.kt)("em",{parentName:"li"},"Post")," ",(0,r.kt)("strong",{parentName:"li"},"Record")," (you have the ",(0,r.kt)("em",{parentName:"li"},"Id")," of a ",(0,r.kt)("em",{parentName:"li"},"Post")," ",(0,r.kt)("strong",{parentName:"li"},"Record"),") and you want to find all ",(0,r.kt)("em",{parentName:"li"},"Group"),"s that it belongs to you would use this javascript query in a ",(0,r.kt)("strong",{parentName:"li"},"Query Records")," that is set to the ",(0,r.kt)("strong",{parentName:"li"},"Group")," class.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"where({\n    posts: { pointsTo: Inputs.PostId },\n})\n")),(0,r.kt)("p",null,"As you can see above you must also make sure that you use the correct relation field, in this case ",(0,r.kt)("em",{parentName:"p"},"posts")," on the ",(0,r.kt)("em",{parentName:"p"},"Group")," collection."))}u.isMDXComponent=!0},71099:function(e,t,a){t.Z=a.p+"assets/images/comments-owner-7050d4ca59de4ea9d5c4a5d3f92e40fb.png"},64318:function(e,t,a){t.Z=a.p+"assets/images/create-pointer-fc37c2bb58c69097c260a7c257088bf1.png"},39018:function(e,t,a){t.Z=a.p+"assets/images/create-relation-232b36825ac9f8b8a3135f15fc31d98a.png"},10216:function(e,t,a){t.Z=a.p+"assets/images/insert-pointer-66dc264c988a6b6435578cf152ded8cd.png"},93731:function(e,t,a){t.Z=a.p+"assets/images/query-pointer-1-140a16b5ad7f993cfc18456a3336b9fe.png"},74692:function(e,t,a){t.Z=a.p+"assets/images/query-pointer-2-590fed35c4b85ef7411dd9c49f6e9aa5.png"},40573:function(e,t,a){t.Z=a.p+"assets/images/query-relation-1-d00bef4e2f28f7a648fe2365eab0208b.png"},10573:function(e,t,a){t.Z=a.p+"assets/images/record-relation-1-2f9a41a1851911870db74c34e33534dc.png"},60277:function(e,t,a){t.Z=a.p+"assets/images/record-relation-2-0046341d81042a56be90e80702198540.png"},50644:function(e,t,a){t.Z=a.p+"assets/images/view-relation-6e174d6a6d1384191de50f26f17b3a25.png"}}]);