"use strict";(self.webpackChunknew_noodl_docs=self.webpackChunknew_noodl_docs||[]).push([[1198],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),f=a,g=d["".concat(p,".").concat(f)]||d[f]||c[f]||o;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},98935:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return d}});var r=t(83117),a=t(80102),o=(t(67294),t(3905)),i=t(44996),s=["components"],p={title:"Loading Spinner",hide_title:!0},l="Loading Spinner",u={unversionedId:"prefabs/loading-spinner/README",id:"prefabs/loading-spinner/README",title:"Loading Spinner",description:"The loading spinner is a useful prefab for when you need to indicate that data is loading or a task is being peformed and you want to prevent accidental input from the user while they are waiting.",source:"@site/library/prefabs/loading-spinner/README.md",sourceDirName:"prefabs/loading-spinner",slug:"/prefabs/loading-spinner/",permalink:"/2.7/library/prefabs/loading-spinner/",tags:[],version:"current",frontMatter:{title:"Loading Spinner",hide_title:!0},sidebar:"loadingSpinnerSidebar"},c={},d=[],f={toc:d};function g(e){var n=e.components,p=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},f,p,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"loading-spinner"},"Loading Spinner"),(0,o.kt)("p",null,"The loading spinner is a useful prefab for when you need to indicate that data is loading or a task is being peformed and you want to prevent accidental input from the user while they are waiting."),(0,o.kt)("p",null,"It's very easy to use, simply drag the ",(0,o.kt)("strong",{parentName:"p"},"Loading Spinner")," component to your node editor and connect a signal to ",(0,o.kt)("strong",{parentName:"p"},"Show")," when you want to display it and ",(0,o.kt)("strong",{parentName:"p"},"Hide")," when you are done and want it hidden."),(0,o.kt)("div",{className:"ndl-image-with-background xl"},(0,o.kt)("p",null,(0,o.kt)("img",{src:t(1150).Z,width:"1402",height:"764"}))),(0,o.kt)("p",null,"Above you can see a typical use case in combination with the ",(0,o.kt)("strong",{parentName:"p"},"Query Records")," node, trigger the ",(0,o.kt)("strong",{parentName:"p"},"Show")," signal when you start the request to the cloud services and then ",(0,o.kt)("strong",{parentName:"p"},"Hide")," when it finishes (remember to capture both successful and failed requests)."),(0,o.kt)("div",{className:"ndl-video"},(0,o.kt)("video",{width:"100%",autoPlay:!0,muted:!0,loop:!0,src:(0,i.Z)("/library/prefabs/loading-spinner/loading-spinner.mp4")})),(0,o.kt)("p",null,"A feature of the loading spinner is that you can do multiple consecutive ",(0,o.kt)("strong",{parentName:"p"},"Show")," signals and it will keep track of the count and then require the same amount of ",(0,o.kt)("strong",{parentName:"p"},"Hide")," signals to close. This is useful if you have parallel request to the backend and you want to make sure all requests have completed before you hide the spinner."))}g.isMDXComponent=!0},1150:function(e,n,t){n.Z=t.p+"assets/images/loading-spinner-nodes-1-b040a48c10cf5d33096be410cf068790.png"}}]);